{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=https://www.ergoncredit.com.br/imagens/logo-ergoncredit.svg align=\"left\"> \n",
    "\n",
    "<br>\n",
    "<h1>Resolução da Prova Técnica da ErgonCredit</h1>\n",
    "\n",
    "\n",
    "Este projeto foi criado por <b>Grazielle Alessa</b> para o Processo Seletivo da ErgonCredit.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>1.Implemente, na sua linguagem de preferência, os seguintes problemas. Para todos os algoritmos abaixo implemente a versão recursiva e a versão iterativa do mesmo.</h4>\n",
    "\n",
    "<ol>\n",
    "<li>Achar o número de Fibbonacci.<br>\n",
    "<li>Definir se um número é ou não primo.<br>\n",
    "<li>Definir por quais números M um número N é divisível (sendo que N > M).<br>\n",
    "<li>Um exemplo de polimorfismo (usando uma linguagem orientada a objeto).<br>\n",
    "</ol>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n"
     ]
    }
   ],
   "source": [
    "def fibbo(lim):\n",
    "    i=0\n",
    "    num=1\n",
    "    seq = [num]\n",
    "    while num <= lim:\n",
    "        aux = i\n",
    "        i = num\n",
    "        num = i + aux\n",
    "        seq.append(num)\n",
    "    print(seq)\n",
    "\n",
    "fibbo(300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fibbo_rec(n):\n",
    "    if n <= 1:\n",
    "        return n\n",
    "    else:\n",
    "        return(fibbo_rec(n-1) + fibbo_rec(n-2))\n",
    "\n",
    "def fibbo2(n):\n",
    "    seq =[]\n",
    "    for i in range(300):\n",
    "           seq.append(fibbo_rec(i))\n",
    "    print(seq)\n",
    "\n",
    "fibbo2(300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def isPrime(n):\n",
    "    while i<=n:\n",
    "        if n % i =0:\n",
    "            aux = aux+1\n",
    "        else:\n",
    "            i=i+1\n",
    "    \n",
    "    if aux % 2 = 0:\n",
    "        print(\"This is a prime number\")\n",
    "    else:\n",
    "        print(\"This isn't a prime number\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>2. Qual a diferença entre LIFO, FIFO, FILO?</h4>\n",
    "\n",
    "LIFO (Last In First Out)\n",
    "FIFO (First In First Out)\n",
    "FILO (First In Last Out)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>3. Ao passar parâmetros para uma função, podemos passar por valor ou por referência.\n",
    "Qual a diferença entre os 2 métodos?</h4>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>4. Qual a ordem de complexidade do algoritmo de multiplicação de matrizes abaixo?</h4>\n",
    "\n",
    "for (int i = 0; i < N; i++)<br>\n",
    "for (int j = 0; j < N; j++)<br>\n",
    "for (int k = 0; k < N; k++)<br>\n",
    "C[i][j] += A[i][k] * B[k][j];<br>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>5. Considerando o algoritmo acima, você consegue pensar em uma forma de deixar esse\n",
    "algoritmo com uma complexidade menor?</h4>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>6. Qual a diferença entre problemas NP-Completos e NP-Incompletos? Você consegue\n",
    "pensar em exemplos de cada um?</h4>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>7. Considerando a notação O para complexidade de algoritmos, preencha o quadro\n",
    "abaixo:</h4>\n",
    "\n",
    "\n",
    "<table class=\"tg\">\n",
    "  <tr>\n",
    "    <th class=\"tg-pu0z\">Complexidade para o caso médio</th>\n",
    "    <th class=\"tg-pu0z\">Array</th>\n",
    "    <th class=\"tg-pu0z\">Lista encadeada</th>\n",
    "    <th class=\"tg-pu0z\">Árvore Binária</th>\n",
    "    <th class=\"tg-pu0z\">Hash Table</th>\n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td class=\"tg-6e8n\">Inserir um novo item</td>\n",
    "    <td class=\"tg-0pky\"></td>\n",
    "    <td class=\"tg-0pky\"></td>\n",
    "    <td class=\"tg-0pky\"></td>\n",
    "    <td class=\"tg-0pky\"></td>\n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td class=\"tg-6e8n\">Ordenação</td>\n",
    "    <td class=\"tg-0pky\"></td>\n",
    "    <td class=\"tg-0pky\"></td>\n",
    "    <td class=\"tg-0pky\"></td>\n",
    "    <td class=\"tg-0pky\"></td>\n",
    "  </tr>\n",
    "  <tr>\n",
    "    <td class=\"tg-6e8n\">Busca</td>\n",
    "    <td class=\"tg-0pky\"></td>\n",
    "    <td class=\"tg-0pky\"></td>\n",
    "    <td class=\"tg-0pky\"></td>\n",
    "    <td class=\"tg-0pky\"></td>\n",
    "  </tr>\n",
    "</table>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>9. Escreva o XPATH para pegar o títulos de todos os livros do XML abaixo:</h4>\n",
    "\n",
    "<img src=https://i.imgur.com/6mCUbRA.png align=\"left\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>10. Descreva de maneira resumida, porém com o máximo de detalhes possível, a\n",
    "comunicação entre um browser (IE, Chrome) e o Google. Preferencialmente mostrando\n",
    "como são as mensagens trocadas entre eles. Quais protocolos, padrões etc... são\n",
    "utilizados?</h4>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>11. Para que serve um servidor DNS?</h4>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>12. Qual a diferença entre os protocolos TCP e UDP?</h4>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<h4>13. Descreva a diferença entre criptografia simétrica e assimétrica e exemplos de uso de\n",
    "cada uma.</h4>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>14. Faça um desenho esquemático de um índice invertido dos seguintes documentos:</h4>\n",
    "Documento 1: Ouviram do Ipiranga as margens plácidas\n",
    "Documento 2: Salve lindo pendão da esperança!\n",
    "Documento 3: Já podeis da Pátria filhos\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>15. Qual estrutura de dados você usaria para implementar e porque?</h4>\n",
    "<ul>\n",
    "<li>Um feed de noticias\n",
    "<li>Uma rede social (tipo o facebook)\n",
    "<li>Um dicionário\n",
    "<li>Um analisador léxico\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>16. Qual a diferença entre os paradigmas Statefull e Stateless?</h4>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>17. Quais as diferenças (em performance, uso de memória/cpu, eficiência computacional)\n",
    "entre algoritmos recursivos e iterativos?</h4>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>18. Descreva o algoritmo mais complexo que você precisou mexer (seja programar do\n",
    "zero, ou dar manutenção). O que o algoritmo fazia, por que ele era complexo e qual era\n",
    "mais o menos o pseudo-código dele.</h4>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>19. Quais são as formas tradicionais de fazer sincronização entre processos? E entre\n",
    "threads?</h4>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
